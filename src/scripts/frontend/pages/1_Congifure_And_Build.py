import streamlit as st
import yaml
import os
from misc.utils import load_config
from misc.frontend_utils import save_technical_yaml

# st.logo(st.image("resources/icon.webp"))
st.set_page_config(
    page_title="Athena Insights",
    page_icon="resources/icon.webp",
    layout="wide",)

st.title("Configuration Manager - technicals")
# def save_config(config, section, data):
#     config[section] = data
#     with open('config.yaml', 'w') as file:
#         yaml.safe_dump(config, file, default_flow_style=False)
#     st.success(f"Changes to {section} saved!")


config = load_config()
version = config['technical_yaml']['common']['model_name'].split('_')[-1]
version_number = int(version.replace('v', ''))
config['technical_yaml']['common']['model_name'] = config['technical_yaml']['common']['model_name'].replace(str(version_number), str(version_number+1))


with st.expander("Common Configuration"):
    # st.subheader("Common Configuration")
    col1, col2, col3 = st.columns(3)
    key = 'model_name'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['common'][key])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        # st.text(config['technical_yaml']['common'][key] + ' (autogenerated)')  # Display the key
        st.text_input(config['technical_yaml']['common'][key] + ' (autogenerated)', disabled=True)  # Display the key

    key = 'symbols'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['common'][key])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key}", key=key, value=config['technical_yaml']['common'][key])


with st.expander("Data Ingestion Configuration"):
    # st.subheader("Data Ingestion Configuration")
    col1, col2, col3 = st.columns(3)
    key_1 = 'alpaca_download'
    key_2 = 'refresh'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['data_ingestion'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['data_ingestion'][key_1][key_2])

    key_2 = 'start_date'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['data_ingestion'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['data_ingestion'][key_1][key_2])

    key_2 = 'end_date'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['data_ingestion'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['data_ingestion'][key_1][key_2])

    key_2 = 'window'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['data_ingestion'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['data_ingestion'][key_1][key_2])


with st.expander("Data Preparation Configuration"):
    # st.subheader("Data Preparation Configuration")
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'durations'
    key_2 = 'day_level'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['data_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['data_prep'][key_1][key_2])
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'durations'
    key_2 = 'hour_level'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['data_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['data_prep'][key_1][key_2])
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'durations'
    key_2 = 'minute_level'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['data_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['data_prep'][key_1][key_2])


with st.expander("Feature Preparation Configuration"):
    # st.subheader("Feature Preparation Configuration")
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'features_to_be_calculated'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}", value=config['technical_yaml']['feature_prep'][key_1])

    st.write("---")
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'symbols'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}", value=config['technical_yaml']['feature_prep'][key_1])

    st.write("---")
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'other_features'
    key_2 = 'base_df'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['feature_prep'][key_1][key_2])
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'other_features'
    key_2 = 'features_to_be_calculated'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['feature_prep'][key_1][key_2])

    st.write("---")
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'dependent_var'
    key_2 = 'based_on'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"Updated {key_1}: {key_2}", value=config['technical_yaml']['feature_prep'][key_1][key_2])
        
    key_2 = 'prev_data_points'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"Updated {key_1}: {key_2}", value=config['technical_yaml']['feature_prep'][key_1][key_2])
        
    key_2 = 'positive_slope_threshold'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"Updated {key_1}: {key_2}", value=config['technical_yaml']['feature_prep'][key_1][key_2])
        
    key_2 = 'negative_slope_threshold'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"Updated {key_1}: {key_2}", value=config['technical_yaml']['feature_prep'][key_1][key_2])
        
    key_2 = 'positive_rise_threshold'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"Updated {key_1}: {key_2}", value=config['technical_yaml']['feature_prep'][key_1][key_2])
        
    key_2 = 'negative_drop_threshold'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"Updated {key_1}: {key_2}", value=config['technical_yaml']['feature_prep'][key_1][key_2])
        
    key_2 = 'positive_future_window'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"Updated {key_1}: {key_2}", value=config['technical_yaml']['feature_prep'][key_1][key_2])
        
    key_2 = 'negative_future_window'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"Updated {key_1}: {key_2}", value=config['technical_yaml']['feature_prep'][key_1][key_2])

    st.write("---")


with st.expander("Model Configuration"):
    # st.subheader("Feature Preparation Configuration")
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'model_selection'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['model'][key_1])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}", value=config['technical_yaml']['model'][key_1])

    st.write("---")
    
with st.expander("Modeling Configuration"):
    # st.subheader("Feature Preparation Configuration")
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'category_map'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['modeling'][key_1])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}", value=config['technical_yaml']['modeling'][key_1])
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'start_date'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['modeling'][key_1])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}", value=config['technical_yaml']['modeling'][key_1])
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'end_date'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['modeling'][key_1])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}", value=config['technical_yaml']['modeling'][key_1])

    st.write("---")


def create_new_config(config):
    folder = config['technical_yaml']['common']['model_name']

    directory = os.path.dirname(f'config/{folder}/')
    if not os.path.exists(directory):
        os.makedirs(directory)

    path_yaml = f'{directory}/paths.yaml'
    with open(path_yaml, 'w+') as ff:
        yaml.dump(config['technical_yaml'], ff)

    path_yaml = f'{directory}/technical.yaml'
    with open(path_yaml, 'w+') as ff:
        yaml.dump(config['technical_yaml'], ff)

if st.button('Configure and build'):
    create_new_config(config)