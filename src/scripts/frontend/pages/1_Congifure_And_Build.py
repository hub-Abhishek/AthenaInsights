import streamlit as st
import yaml
from misc.utils import load_config
from misc.frontend_utils import save_technical_yaml

# st.logo(st.image("resources/icon.webp"))
st.set_page_config(
    page_title="Athena Insights",
    page_icon="resources/icon.webp",
    layout="wide",)

st.title("Configuration Manager - technicals")
# def save_config(config, section, data):
#     config[section] = data
#     with open('config.yaml', 'w') as file:
#         yaml.safe_dump(config, file, default_flow_style=False)
#     st.success(f"Changes to {section} saved!")


config = load_config()
with st.expander("Common Configuration"):
    # st.subheader("Common Configuration")
    col1, col2, col3 = st.columns(3)
    key = 'model_name'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['common'][key])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        # st.text(config['technical_yaml']['common'][key] + ' (autogenerated)')  # Display the key
        st.text_input(config['technical_yaml']['common'][key] + ' (autogenerated)', disabled=True)  # Display the key

    key = 'symbols'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['common'][key])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key}", key=key, value=config['technical_yaml']['common'][key])


with st.expander("Data Ingestion Configuration"):
    # st.subheader("Data Ingestion Configuration")
    col1, col2, col3 = st.columns(3)
    key_1 = 'alpaca_download'
    key_2 = 'refresh'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['data_ingestion'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['data_ingestion'][key_1][key_2])

    key_2 = 'start_date'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['data_ingestion'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['data_ingestion'][key_1][key_2])

    key_2 = 'end_date'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['data_ingestion'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['data_ingestion'][key_1][key_2])

    key_2 = 'window'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['data_ingestion'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['data_ingestion'][key_1][key_2])


with st.expander("Data Preparation Configuration"):
    # st.subheader("Data Preparation Configuration")
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'durations'
    key_2 = 'day_level'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['data_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['data_prep'][key_1][key_2])
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'durations'
    key_2 = 'hour_level'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['data_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['data_prep'][key_1][key_2])
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'durations'
    key_2 = 'minute_level'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['data_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['data_prep'][key_1][key_2])


with st.expander("Feature Preparation Configuration"):
    # st.subheader("Feature Preparation Configuration")
    st.text(config['technical_yaml']['feature_prep'].keys())
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'features_to_be_calculated'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}", value=config['technical_yaml']['feature_prep'][key_1])

    st.write("---")
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'symbols'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}", value=config['technical_yaml']['feature_prep'][key_1])

    st.write("---")
    
    col1, col2, col3 = st.columns(3)
    key_1 = 'other_features'
    key_2 = 'base_df'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['feature_prep'][key_1][key_2])

        
    key_2 = 'features_to_be_calculated'
    with col1:
        st.write("Parameter name")  # Display the key
        st.text(key_1 + ': ' + key_2)  # Display the key
    with col2:
        st.write("Parameter Value")  # Display the key
        st.text(config['technical_yaml']['feature_prep'][key_1][key_2])  # Display the key
    with col3:
        # Use session state to temporarily hold the input value
        st.text_input(f"New value for {key_1}: {key_2}", value=config['technical_yaml']['feature_prep'][key_1][key_2])

    st.write("---")


st.subheader("Feature Preparation Configuration")
edited_feature_prep = st.text_area("Edit Feature Prep Configurations", yaml.safe_dump(config['technical_yaml']['feature_prep'], default_flow_style=False), height=400)
if st.button('Save Feature Prep Changes', key='feature_prep'):
    new_data = yaml.safe_load(edited_feature_prep)
    save_config(config, 'feature_prep', new_data)
        
# Tabs for each major section of the configuration
tab_keys = ["Common", "Data Ingestion", "Data Prep", "Feature Prep", "Model", "Modeling"]
tabs = st.tabs(tab_keys)



with tabs[3]:
    st.subheader("Feature Preparation Configuration")
    edited_feature_prep = st.text_area("Edit Feature Prep Configurations", yaml.safe_dump(config['technical_yaml']['feature_prep'], default_flow_style=False), height=400)
    if st.button('Save Feature Prep Changes', key='feature_prep'):
        new_data = yaml.safe_load(edited_feature_prep)
        save_config(config, 'feature_prep', new_data)

with tabs[4]:
    st.subheader("Model Configuration")
    edited_model = st.text_area("Edit Model Configurations", yaml.safe_dump(config['technical_yaml']['model'], default_flow_style=False), height=150)
    if st.button('Save Model Changes', key='model'):
        new_data = yaml.safe_load(edited_model)
        save_config(config, 'model', new_data)

with tabs[5]:
    st.subheader("Modeling Configuration")
    edited_modeling = st.text_area("Edit Modeling Configurations", yaml.safe_dump(config['technical_yaml']['modeling'], default_flow_style=False), height=250)
    if st.button('Save Modeling Changes', key='modeling'):
        new_data = yaml.safe_load(edited_modeling)
        save_config(config, 'modeling', new_data)